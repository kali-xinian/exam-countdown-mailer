name: 测试错误处理机制

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    # 每小时执行一次测试（可选）
    - cron: '0 * * * *'

jobs:
  test-error-notification:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
    
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install openai
    
    - name: 创建测试脚本
      run: |
        cat > test_error_handling.py << 'EOF'
        #!/usr/bin/env python
        # -*- coding: utf-8 -*-
        """
        测试错误处理机制的脚本
        """
        
        import os
        import sys
        import logging
        import traceback
        
        # 添加项目路径
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        # 导入项目模块
        try:
            from exam_countdown import ExamCountdownSystem, send_error_notification
        except Exception as e:
            print(f"导入模块失败: {e}")
            sys.exit(1)
        
        def test_error_handling():
            """测试错误处理机制"""
            print("开始测试错误处理机制...")
            
            try:
                # 初始化系统
                system = ExamCountdownSystem()
                print("系统初始化成功")
                
                # 模拟一个错误
                try:
                    raise Exception("测试错误处理机制 - 这是一条测试错误信息")
                except Exception as e:
                    print("模拟错误已触发，准备发送错误通知邮件...")
                    # 发送错误通知
                    try:
                        send_error_notification(system, e, traceback.format_exc())
                        print("错误通知邮件发送完成")
                        return True
                    except Exception as notification_error:
                        print(f"发送错误通知失败: {notification_error}")
                        return False
                        
            except Exception as e:
                print(f"测试过程中发生错误: {e}")
                traceback.print_exc()
                return False
        
        if __name__ == "__main__":
            success = test_error_handling()
            if success:
                print("测试成功完成")
                sys.exit(0)
            else:
                print("测试失败")
                sys.exit(1)
        EOF
    
    - name: 运行测试
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      run: |
        python test_error_handling.py